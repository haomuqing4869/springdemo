<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 表示该 Maven 项目的模型版本号 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- <parent> 标签指定了当前项目的父级 POM，它定义了一些公共的配置和依赖，供当前项目继承和使用。 -->
    <!-- 子项目继承了 Spring Boot Starter Parent 的配置和依赖，这意味着子项目可以继承 Spring Boot 提供的默认配置和依赖管理。-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.4</version>
        <!-- 设置为相对路径或留空 如果该子项目就是位于父级 POM 的同级目录下，则可以将 <relativePath> 设置为空值或留空。 -->
        <relativePath/>
    </parent>

    <groupId>com.example</groupId>
    <artifactId>springdemo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>springdemo</name>
    <description>Demo project for Spring Boot</description>

    <!-- <properties> 标签用于定义项目的属性（properties）。属性可以在项目的 POM 文件中多处使用，并且可以通过 ${propertyName} 的形式进行引用和替代。-->
    <properties>
        <java.version>17</java.version>
    </properties>

    <!-- Maven 项目的依赖项清单（dependencies）-->
    <dependencies>
        <!-- Spring Boot Web 应用程序 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot 测试模块 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- MySQL 数据库 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>

        <!-- MyBatis 持久化框架 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.0.0</version>
        </dependency>

        <!-- MyBatis 代码生成器 -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.7</version>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Thymeleaf 模板引擎 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!--  JPA（Java Persistence API）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    </dependencies>

    <!-- Maven 项目的构建配置（build）。在 <build> 元素中，可以定义一些插件（plugins）来执行特定的构建任务。-->
    <build>
        <plugins>
            <!-- Spring Boot 的 Maven 插件，用于打包和运行 Spring Boot 应用程序。-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- MyBatis Generator 的 Maven 插件，用于自动生成 MyBatis 的实体类、Mapper 接口和 XML 配置文件。
                 它可以根据数据库表结构和配置文件的定义生成代码，减少手动编写的工作量。 -->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <!-- 插件的版本 -->
                <version>1.3.7</version>

                <!-- 插件的依赖项，这里指定了需要使用的 MySQL 连接器依赖。-->
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>8.0.28</version>
                    </dependency>
                </dependencies>

                <!-- 插件的配置信息 -->
                <configuration>
                    <!-- 是否打印详细日志 -->
                    <verbose>true</verbose>
                    <!-- 是否允许覆盖已生成的文件 -->
                    <overwrite>true</overwrite>
                    <!-- 自定义的配置文件路径  自定义配置文件的名称，默认是generatorConfig.xml -->
                    <configurationFile>
                        src/main/resources/generatorConfig.xml
                    </configurationFile>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
